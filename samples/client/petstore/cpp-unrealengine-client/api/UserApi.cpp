/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "FUserApi.h"

namespace api {

using namespace model;

bool FUserApi::CreateUser(        
        FFUser body
        , const FOnCreateUser& SuccessDelegate = FOnCreateUser()
{
    FString VerbType = "POST";
    bool bHasFormParams = false;
    bool bHasBodyParam = true;
    bool bHasQueryParams = false;
    bool bHasPathParams = false;
    
    FString BasePath = /user;
    
    

	TPair<FString, FString> AccetpType;
    //defaults
	AccetpType.Key = "accept";
	AccetpType.Value = "application/json";
	TArray<TPair<FString, FString>> Headers;
	Headers.Add(AccetpType);

    
    TPair<FString, FString> ContentType;
    
    ContentType.Key = "content-type";
    ContentType.Value = "application/json";

    CreateRequest(EVerbType::POST, BasePath, Headers, FHttpRequestCompleteDelegate());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FUserApi::OnCreateUser, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FUserApi::CreateUsersWithArrayInput(        
        TArray&lt;FUser&gt; body
        , const FOnCreateUsersWithArrayInput& SuccessDelegate = FOnCreateUsersWithArrayInput()
{
    FString VerbType = "POST";
    bool bHasFormParams = false;
    bool bHasBodyParam = true;
    bool bHasQueryParams = false;
    bool bHasPathParams = false;
    
    FString BasePath = /user/createWithArray;
    
    

	TPair<FString, FString> AccetpType;
    //defaults
	AccetpType.Key = "accept";
	AccetpType.Value = "application/json";
	TArray<TPair<FString, FString>> Headers;
	Headers.Add(AccetpType);

    
    TPair<FString, FString> ContentType;
    
    ContentType.Key = "content-type";
    ContentType.Value = "application/json";

    CreateRequest(EVerbType::POST, BasePath, Headers, FHttpRequestCompleteDelegate());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FUserApi::OnCreateUsersWithArrayInput, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FUserApi::CreateUsersWithListInput(        
        TArray&lt;FUser&gt; body
        , const FOnCreateUsersWithListInput& SuccessDelegate = FOnCreateUsersWithListInput()
{
    FString VerbType = "POST";
    bool bHasFormParams = false;
    bool bHasBodyParam = true;
    bool bHasQueryParams = false;
    bool bHasPathParams = false;
    
    FString BasePath = /user/createWithList;
    
    

	TPair<FString, FString> AccetpType;
    //defaults
	AccetpType.Key = "accept";
	AccetpType.Value = "application/json";
	TArray<TPair<FString, FString>> Headers;
	Headers.Add(AccetpType);

    
    TPair<FString, FString> ContentType;
    
    ContentType.Key = "content-type";
    ContentType.Value = "application/json";

    CreateRequest(EVerbType::POST, BasePath, Headers, FHttpRequestCompleteDelegate());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FUserApi::OnCreateUsersWithListInput, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FUserApi::DeleteUser(        
        FString username
        , const FOnDeleteUser& SuccessDelegate = FOnDeleteUser()
{
    FString VerbType = "DELETE";
    bool bHasFormParams = false;
    bool bHasBodyParam = false;
    bool bHasQueryParams = false;
    bool bHasPathParams = true;
    
    FString BasePath = /user/{username};
    
    

	TPair<FString, FString> AccetpType;
    //defaults
	AccetpType.Key = "accept";
	AccetpType.Value = "application/json";
	TArray<TPair<FString, FString>> Headers;
	Headers.Add(AccetpType);

    
    TPair<FString, FString> ContentType;
    TPair<FString, FString> Param;
    Param.Key = FString("{" + "username" + "}");
    Param.Value = username
    ConstructPathParams(Param, BasePath);

    CreateRequest(EVerbType::DELETE, BasePath, Headers, FHttpRequestCompleteDelegate());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FUserApi::OnDeleteUser, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FUserApi::GetUserByName(        
        FString username
        , const FOnGetUserByName& SuccessDelegate = FOnGetUserByName()
{
    FString VerbType = "GET";
    bool bHasFormParams = false;
    bool bHasBodyParam = false;
    bool bHasQueryParams = false;
    bool bHasPathParams = true;
    
    FString BasePath = /user/{username};
    
    

	TPair<FString, FString> AccetpType;
    //defaults
	AccetpType.Key = "accept";
	AccetpType.Value = "application/json";
	TArray<TPair<FString, FString>> Headers;
	Headers.Add(AccetpType);

    
    TPair<FString, FString> ContentType;
    TPair<FString, FString> Param;
    Param.Key = FString("{" + "username" + "}");
    Param.Value = username
    ConstructPathParams(Param, BasePath);

    CreateRequest(EVerbType::GET, BasePath, Headers, FHttpRequestCompleteDelegate());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FUserApi::OnGetUserByName, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FUserApi::LoginUser(        
        FString username,
        FString password
        , const FOnLoginUser& SuccessDelegate = FOnLoginUser()
{
    FString VerbType = "GET";
    bool bHasFormParams = false;
    bool bHasBodyParam = false;
    bool bHasQueryParams = true;
    bool bHasPathParams = false;
    
    FString BasePath = /user/login;
    
    

	TPair<FString, FString> AccetpType;
    //defaults
	AccetpType.Key = "accept";
	AccetpType.Value = "application/json";
	TArray<TPair<FString, FString>> Headers;
	Headers.Add(AccetpType);

     TArray<TPair<FString,FString>> Params;
    {
        TPair<FString, TArray<FString>> statusParam;
        statusParam.Key = username;
        statusParam.Value.Add(username);
        Params.Add(statusParam);
    }
    FString QueryParams = ConstructQueryParams(Params);
    BasePath += QueryParams;
     TArray<TPair<FString,FString>> Params;
    {
        TPair<FString, TArray<FString>> statusParam;
        statusParam.Key = password;
        statusParam.Value.Add(password);
        Params.Add(statusParam);
    }
    FString QueryParams = ConstructQueryParams(Params);
    BasePath += QueryParams;
    
    TPair<FString, FString> ContentType;

    CreateRequest(EVerbType::GET, BasePath, Headers, FHttpRequestCompleteDelegate());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FUserApi::OnLoginUser, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FUserApi::LogoutUser(        
        , const FOnLogoutUser& SuccessDelegate = FOnLogoutUser()
{
    FString VerbType = "GET";
    bool bHasFormParams = false;
    bool bHasBodyParam = false;
    bool bHasQueryParams = false;
    bool bHasPathParams = false;
    
    FString BasePath = /user/logout;
    
    

	TPair<FString, FString> AccetpType;
    //defaults
	AccetpType.Key = "accept";
	AccetpType.Value = "application/json";
	TArray<TPair<FString, FString>> Headers;
	Headers.Add(AccetpType);

    
    TPair<FString, FString> ContentType;

    CreateRequest(EVerbType::GET, BasePath, Headers, FHttpRequestCompleteDelegate());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FUserApi::OnLogoutUser, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FUserApi::UpdateUser(        
        FString username,
        FFUser body
        , const FOnUpdateUser& SuccessDelegate = FOnUpdateUser()
{
    FString VerbType = "PUT";
    bool bHasFormParams = false;
    bool bHasBodyParam = true;
    bool bHasQueryParams = false;
    bool bHasPathParams = true;
    
    FString BasePath = /user/{username};
    
    

	TPair<FString, FString> AccetpType;
    //defaults
	AccetpType.Key = "accept";
	AccetpType.Value = "application/json";
	TArray<TPair<FString, FString>> Headers;
	Headers.Add(AccetpType);

    
    TPair<FString, FString> ContentType;
    TPair<FString, FString> Param;
    Param.Key = FString("{" + "username" + "}");
    Param.Value = username
    ConstructPathParams(Param, BasePath);
    
    ContentType.Key = "content-type";
    ContentType.Value = "application/json";

    CreateRequest(EVerbType::PUT, BasePath, Headers, FHttpRequestCompleteDelegate());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FUserApi::OnUpdateUser, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void FUserApi::OnCreateUserResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnCreateUser SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    
    
    
}
void FUserApi::OnCreateUsersWithArrayInputResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnCreateUsersWithArrayInput SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    
    
    
}
void FUserApi::OnCreateUsersWithListInputResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnCreateUsersWithListInput SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    
    
    
}
void FUserApi::OnDeleteUserResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnDeleteUser SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    
    
    
}
void FUserApi::OnGetUserByNameResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnGetUserByName SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    FUser OutResult;
    TSharedPtr<FJsonObject> JsonObject;
    TSharedRef<TJsonReader<> > JsonReader = TJsonReaderFactory<>::Create(ResponseStr);

    if (FJsonSerializer::Deserialize(JsonReader, JsonObject) && JsonObject.IsValid())
    {
        OutResult.FromJson(JsonObject);
        if (PlayFabRequestHandler::DecodeError(JsonObject, OutError))
        {
            return false;
        }
    }

    {
        SuccessDelegate.ExecuteIfBound(OutResult);
    }
    
    
    
}
void FUserApi::OnLoginUserResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnLoginUser SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    FString OutResult;
    TSharedPtr<FJsonObject> JsonObject;
    TSharedRef<TJsonReader<> > JsonReader = TJsonReaderFactory<>::Create(ResponseStr);

    if (FJsonSerializer::Deserialize(JsonReader, JsonObject) && JsonObject.IsValid())
    {
        OutResult.FromJson(JsonObject);
        if (PlayFabRequestHandler::DecodeError(JsonObject, OutError))
        {
            return false;
        }
    }

    {
        SuccessDelegate.ExecuteIfBound(OutResult);
    }
    
    
    
}
void FUserApi::OnLogoutUserResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnLogoutUser SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    
    
    
}
void FUserApi::OnUpdateUserResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnUpdateUser SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    
    
    
}

}


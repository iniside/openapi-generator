/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "FStoreApi.h"

namespace api {

using namespace model;

bool FStoreApi::DeleteOrder(        
        FString orderId
        , const FOnDeleteOrder& SuccessDelegate = FOnDeleteOrder()
{
    FString VerbType = "DELETE";
    bool bHasFormParams = false;
    bool bHasBodyParam = false;
    bool bHasQueryParams = false;
    bool bHasPathParams = true;
    
    FString BasePath = /store/order/{orderId};

    
    TPair<FString, FString> ContentType;
    TPair<FString, FString> Param;
    Param.Key = FString("{" + "orderId" + "}");
    Param.Value = orderId
    ConstructPathParams(Param, /store/order/{orderId});

    FString ApiPath = /store/order/{orderId};
    CreateRequest(EVerbType::DELETE, BasePath, Headers, FHttpRequestCompleteDelegate());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FStoreApi::OnDeleteOrder, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FStoreApi::GetInventory(        
        , const FOnGetInventory& SuccessDelegate = FOnGetInventory()
{
    FString VerbType = "GET";
    bool bHasFormParams = false;
    bool bHasBodyParam = false;
    bool bHasQueryParams = false;
    bool bHasPathParams = false;
    
    FString BasePath = /store/inventory;

    
    TPair<FString, FString> ContentType;

    FString ApiPath = /store/inventory;
    CreateRequest(EVerbType::GET, BasePath, Headers, FHttpRequestCompleteDelegate());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FStoreApi::OnGetInventory, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FStoreApi::GetOrderById(        
        int64 orderId
        , const FOnGetOrderById& SuccessDelegate = FOnGetOrderById()
{
    FString VerbType = "GET";
    bool bHasFormParams = false;
    bool bHasBodyParam = false;
    bool bHasQueryParams = false;
    bool bHasPathParams = true;
    
    FString BasePath = /store/order/{orderId};

    
    TPair<FString, FString> ContentType;
    TPair<FString, int64> Param;
    Param.Key = FString("{" + "orderId" + "}");
    Param.Value = orderId
    ConstructPathParams(Param, /store/order/{orderId});

    FString ApiPath = /store/order/{orderId};
    CreateRequest(EVerbType::GET, BasePath, Headers, FHttpRequestCompleteDelegate());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FStoreApi::OnGetOrderById, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FStoreApi::PlaceOrder(        
        FFOrder body
        , const FOnPlaceOrder& SuccessDelegate = FOnPlaceOrder()
{
    FString VerbType = "POST";
    bool bHasFormParams = false;
    bool bHasBodyParam = true;
    bool bHasQueryParams = false;
    bool bHasPathParams = false;
    
    FString BasePath = /store/order;

    
    TPair<FString, FString> ContentType;
    
    ContentType.Key = "content-type";
    ContentType.Value = "application/json";

    FString ApiPath = /store/order;
    CreateRequest(EVerbType::POST, BasePath, Headers, FHttpRequestCompleteDelegate());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FStoreApi::OnPlaceOrder, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void FStoreApi::OnDeleteOrderResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnDeleteOrder SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    
    
    
}
void FStoreApi::OnGetInventoryResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnGetInventory SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    TMap<FString, int32> OutResult;
    TSharedPtr<FJsonObject> JsonObject;
    TSharedRef<TJsonReader<> > JsonReader = TJsonReaderFactory<>::Create(ResponseStr);

    if (FJsonSerializer::Deserialize(JsonReader, JsonObject) && JsonObject.IsValid())
    {
        OutResult.FromJson(JsonObject);
        if (PlayFabRequestHandler::DecodeError(JsonObject, OutError))
        {
            return false;
        }
    }

    {
        SuccessDelegate.ExecuteIfBound(OutResult);
    }
    
    
    
}
void FStoreApi::OnGetOrderByIdResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnGetOrderById SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    FOrder OutResult;
    TSharedPtr<FJsonObject> JsonObject;
    TSharedRef<TJsonReader<> > JsonReader = TJsonReaderFactory<>::Create(ResponseStr);

    if (FJsonSerializer::Deserialize(JsonReader, JsonObject) && JsonObject.IsValid())
    {
        OutResult.FromJson(JsonObject);
        if (PlayFabRequestHandler::DecodeError(JsonObject, OutError))
        {
            return false;
        }
    }

    {
        SuccessDelegate.ExecuteIfBound(OutResult);
    }
    
    
    
}
void FStoreApi::OnPlaceOrderResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnPlaceOrder SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    FOrder OutResult;
    TSharedPtr<FJsonObject> JsonObject;
    TSharedRef<TJsonReader<> > JsonReader = TJsonReaderFactory<>::Create(ResponseStr);

    if (FJsonSerializer::Deserialize(JsonReader, JsonObject) && JsonObject.IsValid())
    {
        OutResult.FromJson(JsonObject);
        if (PlayFabRequestHandler::DecodeError(JsonObject, OutError))
        {
            return false;
        }
    }

    {
        SuccessDelegate.ExecuteIfBound(OutResult);
    }
    
    
    
}

}


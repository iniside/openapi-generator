/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FStoreApi.h
 *
 * 
 */


#include "../ApiClient.h"

#include "FOrder.h"
#include "FString.h"
#include "TMap.h"



namespace api {

class  FStoreApi : public IFStoreApi 
{
public:
    DECLARE_DELEGATE_OneParam(FOnDeleteOrder, const & )
    DECLARE_DELEGATE_OneParam(FOnGetInventory, const TMap<FString, int32>& )
    DECLARE_DELEGATE_OneParam(FOnGetOrderById, const FOrder& )
    DECLARE_DELEGATE_OneParam(FOnPlaceOrder, const FOrder& )
   
    bool DeleteOrder(
        FString orderId
        , const FOnDeleteOrder& SuccessDelegate = FOnDeleteOrder()
    )
   
    bool GetInventory(
        , const FOnGetInventory& SuccessDelegate = FOnGetInventory()
    )
   
    bool GetOrderById(
        int64 orderId
        , const FOnGetOrderById& SuccessDelegate = FOnGetOrderById()
    )
   
    bool PlaceOrder(
        FFOrder body
        , const FOnPlaceOrder& SuccessDelegate = FOnPlaceOrder()
    )

void OnDeleteOrderResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded
        , FOnDeleteOrder SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate);
void OnGetInventoryResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded
        , FOnGetInventory SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate);
void OnGetOrderByIdResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded
        , FOnGetOrderById SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate);
void OnPlaceOrderResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded
        , FOnPlaceOrder SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}


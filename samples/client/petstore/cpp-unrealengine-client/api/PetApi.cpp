/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "PetApi.h"

namespace api {

using namespace model;

bool FPetApi::AddPet(        
        Pet Body
        , const FOnAddPet& SuccessDelegate = FOnAddPet()
{
    FString VerbType = "POST";
    bool bHasFormParams = false;
    bool bHasBodyParam = true;
    bool bHasQueryParams = false;
    bool bHasPathParams = false;

    TPair<FString, FString> ContentType;
    if(VerbType == "GET")
    {
    }
    
        ContentType.Key = "content-type";
        ContentType.Value = "application/json";
    if(bHasQueryParams)
    {
    }
    FString ApiPath = /pet;
    auto HttpRequest = PlayFabRequestHandler::SendRequest(ApiPath, request.toJSONString(), TEXT("X-SecretKey"), PlayFabSettings::GetDeveloperSecretKey());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FPetApi::OnAddPet, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FPetApi::DeletePet(        
        int64 PetId,
        FString ApiKey
        , const FOnDeletePet& SuccessDelegate = FOnDeletePet()
{
    FString VerbType = "DELETE";
    bool bHasFormParams = false;
    bool bHasBodyParam = false;
    bool bHasQueryParams = false;
    bool bHasPathParams = true;

    TPair<FString, FString> ContentType;
     PetId
    if(VerbType == "GET")
    {
        FString("{" + "PetId" + "}")
    }
    if(bHasQueryParams)
    {
    }
    FString ApiPath = /pet/{petId};
    auto HttpRequest = PlayFabRequestHandler::SendRequest(ApiPath, request.toJSONString(), TEXT("X-SecretKey"), PlayFabSettings::GetDeveloperSecretKey());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FPetApi::OnDeletePet, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FPetApi::FindPetsByStatus(        
        TArray&lt;FString&gt; Status
        , const FOnFindPetsByStatus& SuccessDelegate = FOnFindPetsByStatus()
{
    FString VerbType = "GET";
    bool bHasFormParams = false;
    bool bHasBodyParam = false;
    bool bHasQueryParams = true;
    bool bHasPathParams = false;

    TPair<FString, FString> ContentType;
    if(VerbType == "GET")
    {
    }
    if(bHasQueryParams)
    {
        FString Params = "?";
        TArray<TPair<FString, >> GetParams;
		TPair<FString, > statusParam;
		statusParam.Key = ;
		for(TArray&lt;FString&gt; p : Status)
        {
            statusParam.Add(p);
        }
		GetParams.Add(statusParam);
		//Params += "?status=" + Pending;
		for (int32 ParamIdx = 0; ParamIdx < GetParams.Num(); ParamIdx++)
		{
			for (int32 ValueIdx = 0; ValueIdx < GetParams[ParamIdx].Value.Num(); ValueIdx++)
			{
				Params += GetParams[ParamIdx].Key + "=" + GetParams[ParamIdx].Value[ValueIdx];
				if (ValueIdx < GetParams[ParamIdx].Value.Num() - 1)
				{
					Params += "&";
				}
			}
			if (ParamIdx < GetParams.Num() - 1)
			{
				Params += "&";
			}
		}
    }
    FString ApiPath = /pet/findByStatus;
    auto HttpRequest = PlayFabRequestHandler::SendRequest(ApiPath, request.toJSONString(), TEXT("X-SecretKey"), PlayFabSettings::GetDeveloperSecretKey());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FPetApi::OnFindPetsByStatus, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FPetApi::FindPetsByTags(        
        TArray&lt;FString&gt; Tags
        , const FOnFindPetsByTags& SuccessDelegate = FOnFindPetsByTags()
{
    FString VerbType = "GET";
    bool bHasFormParams = false;
    bool bHasBodyParam = false;
    bool bHasQueryParams = true;
    bool bHasPathParams = false;

    TPair<FString, FString> ContentType;
    if(VerbType == "GET")
    {
    }
    if(bHasQueryParams)
    {
        FString Params = "?";
        TArray<TPair<FString, >> GetParams;
		TPair<FString, > statusParam;
		statusParam.Key = ;
		for(TArray&lt;FString&gt; p : Tags)
        {
            statusParam.Add(p);
        }
		GetParams.Add(statusParam);
		//Params += "?status=" + Pending;
		for (int32 ParamIdx = 0; ParamIdx < GetParams.Num(); ParamIdx++)
		{
			for (int32 ValueIdx = 0; ValueIdx < GetParams[ParamIdx].Value.Num(); ValueIdx++)
			{
				Params += GetParams[ParamIdx].Key + "=" + GetParams[ParamIdx].Value[ValueIdx];
				if (ValueIdx < GetParams[ParamIdx].Value.Num() - 1)
				{
					Params += "&";
				}
			}
			if (ParamIdx < GetParams.Num() - 1)
			{
				Params += "&";
			}
		}
    }
    FString ApiPath = /pet/findByTags;
    auto HttpRequest = PlayFabRequestHandler::SendRequest(ApiPath, request.toJSONString(), TEXT("X-SecretKey"), PlayFabSettings::GetDeveloperSecretKey());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FPetApi::OnFindPetsByTags, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FPetApi::GetPetById(        
        int64 PetId
        , const FOnGetPetById& SuccessDelegate = FOnGetPetById()
{
    FString VerbType = "GET";
    bool bHasFormParams = false;
    bool bHasBodyParam = false;
    bool bHasQueryParams = false;
    bool bHasPathParams = true;

    TPair<FString, FString> ContentType;
     PetId
    if(VerbType == "GET")
    {
        FString("{" + "PetId" + "}")
    }
    if(bHasQueryParams)
    {
    }
    FString ApiPath = /pet/{petId};
    auto HttpRequest = PlayFabRequestHandler::SendRequest(ApiPath, request.toJSONString(), TEXT("X-SecretKey"), PlayFabSettings::GetDeveloperSecretKey());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FPetApi::OnGetPetById, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FPetApi::UpdatePet(        
        Pet Body
        , const FOnUpdatePet& SuccessDelegate = FOnUpdatePet()
{
    FString VerbType = "PUT";
    bool bHasFormParams = false;
    bool bHasBodyParam = true;
    bool bHasQueryParams = false;
    bool bHasPathParams = false;

    TPair<FString, FString> ContentType;
    if(VerbType == "GET")
    {
    }
    
        ContentType.Key = "content-type";
        ContentType.Value = "application/json";
    if(bHasQueryParams)
    {
    }
    FString ApiPath = /pet;
    auto HttpRequest = PlayFabRequestHandler::SendRequest(ApiPath, request.toJSONString(), TEXT("X-SecretKey"), PlayFabSettings::GetDeveloperSecretKey());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FPetApi::OnUpdatePet, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FPetApi::UpdatePetWithForm(        
        int64 PetId,
        FString Name,
        FString Status
        , const FOnUpdatePetWithForm& SuccessDelegate = FOnUpdatePetWithForm()
{
    FString VerbType = "POST";
    bool bHasFormParams = true;
    bool bHasBodyParam = false;
    bool bHasQueryParams = false;
    bool bHasPathParams = true;

    TPair<FString, FString> ContentType;
     PetId
    if(VerbType == "GET")
    {
        FString("{" + "PetId" + "}")
    }
    if(bHasQueryParams)
    {
    }
    FString ApiPath = /pet/{petId};
    auto HttpRequest = PlayFabRequestHandler::SendRequest(ApiPath, request.toJSONString(), TEXT("X-SecretKey"), PlayFabSettings::GetDeveloperSecretKey());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FPetApi::OnUpdatePetWithForm, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
bool FPetApi::UploadFile(        
        int64 PetId,
        FString AdditionalMetadata,
        HttpContent File
        , const FOnUploadFile& SuccessDelegate = FOnUploadFile()
{
    FString VerbType = "POST";
    bool bHasFormParams = true;
    bool bHasBodyParam = false;
    bool bHasQueryParams = false;
    bool bHasPathParams = true;

    TPair<FString, FString> ContentType;
     PetId
    if(VerbType == "GET")
    {
        FString("{" + "PetId" + "}")
    }
    if(bHasQueryParams)
    {
    }
    FString ApiPath = /pet/{petId}/uploadImage;
    auto HttpRequest = PlayFabRequestHandler::SendRequest(ApiPath, request.toJSONString(), TEXT("X-SecretKey"), PlayFabSettings::GetDeveloperSecretKey());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &FPetApi::OnUploadFile, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}

void FPetApi::OnAddPetResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnAddPet SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    
    
    
}
void FPetApi::OnDeletePetResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnDeletePet SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    
    
    
}
void FPetApi::OnFindPetsByStatusResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnFindPetsByStatus SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    TArray<Pet> OutResult;
    FString ResponseStr = HttpResponse->GetContentAsString();
	DecodeJsonArray<TArray<Pet>>(OutResult, HttpResponse);
    
    
    
}
void FPetApi::OnFindPetsByTagsResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnFindPetsByTags SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    TArray<Pet> OutResult;
    FString ResponseStr = HttpResponse->GetContentAsString();
	DecodeJsonArray<TArray<Pet>>(OutResult, HttpResponse);
    
    
    
}
void FPetApi::OnGetPetByIdResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnGetPetById SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    Pet OutResult;
    TSharedPtr<FJsonObject> JsonObject;
    TSharedRef<TJsonReader<> > JsonReader = TJsonReaderFactory<>::Create(ResponseStr);

    if (FJsonSerializer::Deserialize(JsonReader, JsonObject) && JsonObject.IsValid())
    {
        OutResult.FromJson(JsonObject);
        if (PlayFabRequestHandler::DecodeError(JsonObject, OutError))
        {
            return false;
        }
    }

    {
        SuccessDelegate.ExecuteIfBound(OutResult);
    }
    
    
    
}
void FPetApi::OnUpdatePetResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnUpdatePet SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    
    
    
}
void FPetApi::OnUpdatePetWithFormResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnUpdatePetWithForm SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    
    
    
}
void FPetApi::OnUploadFileResult(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOnUploadFile SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    ApiResponse OutResult;
    TSharedPtr<FJsonObject> JsonObject;
    TSharedRef<TJsonReader<> > JsonReader = TJsonReaderFactory<>::Create(ResponseStr);

    if (FJsonSerializer::Deserialize(JsonReader, JsonObject) && JsonObject.IsValid())
    {
        OutResult.FromJson(JsonObject);
        if (PlayFabRequestHandler::DecodeError(JsonObject, OutError))
        {
            return false;
        }
    }

    {
        SuccessDelegate.ExecuteIfBound(OutResult);
    }
    
    
    
}

}


/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FUser.h"

namespace model {

FUser::FUser()
{
    m_Id = 0L;
    m_IdIsSet = false;
    m_Username = FString;
    m_UsernameIsSet = false;
    m_FirstName = FString;
    m_FirstNameIsSet = false;
    m_LastName = FString;
    m_LastNameIsSet = false;
    m_Email = FString;
    m_EmailIsSet = false;
    m_Password = FString;
    m_PasswordIsSet = false;
    m_Phone = FString;
    m_PhoneIsSet = false;
    m_UserStatus = 0;
    m_UserStatusIsSet = false;
}

FUser::~FUser()
{
}

void FUser::validate()
{
    // TODO: implement validation
}

web::json::value FUser::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_UsernameIsSet)
    {
        val[utility::conversions::to_string_t("username")] = ModelBase::toJson(m_Username);
    }
    if(m_FirstNameIsSet)
    {
        val[utility::conversions::to_string_t("firstName")] = ModelBase::toJson(m_FirstName);
    }
    if(m_LastNameIsSet)
    {
        val[utility::conversions::to_string_t("lastName")] = ModelBase::toJson(m_LastName);
    }
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    }
    if(m_PasswordIsSet)
    {
        val[utility::conversions::to_string_t("password")] = ModelBase::toJson(m_Password);
    }
    if(m_PhoneIsSet)
    {
        val[utility::conversions::to_string_t("phone")] = ModelBase::toJson(m_Phone);
    }
    if(m_UserStatusIsSet)
    {
        val[utility::conversions::to_string_t("userStatus")] = ModelBase::toJson(m_UserStatus);
    }

    return val;
}

void FUser::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int64FromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("username")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("username"));
        if(!fieldValue.is_null())
        {
            setUsername(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firstName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("firstName"));
        if(!fieldValue.is_null())
        {
            setFirstName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lastName"));
        if(!fieldValue.is_null())
        {
            setLastName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("email"));
        if(!fieldValue.is_null())
        {
            setEmail(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("password")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("password"));
        if(!fieldValue.is_null())
        {
            setPassword(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phone")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("phone"));
        if(!fieldValue.is_null())
        {
            setPhone(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userStatus")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userStatus"));
        if(!fieldValue.is_null())
        {
            setUserStatus(ModelBase::int32FromJson(fieldValue));
        }
    }
}

void FUser::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("username"), m_Username));
    }
    if(m_FirstNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstName"), m_FirstName));
    }
    if(m_LastNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastName"), m_LastName));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("password"), m_Password));
    }
    if(m_PhoneIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phone"), m_Phone));
    }
    if(m_UserStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userStatus"), m_UserStatus));
    }
}

void FUser::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::int64FromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("username")))
    {
        setUsername(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("username"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("firstName")))
    {
        setFirstName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastName")))
    {
        setLastName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        setEmail(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("email"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("password")))
    {
        setPassword(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("password"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("phone")))
    {
        setPhone(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("phone"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userStatus")))
    {
        setUserStatus(ModelBase::int32FromHttpContent(multipart->getContent(utility::conversions::to_string_t("userStatus"))));
    }
}

int64 FUser::getId() const
{
    return m_Id;
}

void FUser::setId(int64 value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool FUser::idIsSet() const
{
    return m_IdIsSet;
}

void FUser::unsetId()
{
    m_IdIsSet = false;
}

FString FUser::getUsername() const
{
    return m_Username;
}

void FUser::setUsername(const FString& value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}

bool FUser::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void FUser::unsetUsername()
{
    m_UsernameIsSet = false;
}

FString FUser::getFirstName() const
{
    return m_FirstName;
}

void FUser::setFirstName(const FString& value)
{
    m_FirstName = value;
    m_FirstNameIsSet = true;
}

bool FUser::firstNameIsSet() const
{
    return m_FirstNameIsSet;
}

void FUser::unsetFirstName()
{
    m_FirstNameIsSet = false;
}

FString FUser::getLastName() const
{
    return m_LastName;
}

void FUser::setLastName(const FString& value)
{
    m_LastName = value;
    m_LastNameIsSet = true;
}

bool FUser::lastNameIsSet() const
{
    return m_LastNameIsSet;
}

void FUser::unsetLastName()
{
    m_LastNameIsSet = false;
}

FString FUser::getEmail() const
{
    return m_Email;
}

void FUser::setEmail(const FString& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool FUser::emailIsSet() const
{
    return m_EmailIsSet;
}

void FUser::unsetEmail()
{
    m_EmailIsSet = false;
}

FString FUser::getPassword() const
{
    return m_Password;
}

void FUser::setPassword(const FString& value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}

bool FUser::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void FUser::unsetPassword()
{
    m_PasswordIsSet = false;
}

FString FUser::getPhone() const
{
    return m_Phone;
}

void FUser::setPhone(const FString& value)
{
    m_Phone = value;
    m_PhoneIsSet = true;
}

bool FUser::phoneIsSet() const
{
    return m_PhoneIsSet;
}

void FUser::unsetPhone()
{
    m_PhoneIsSet = false;
}

int32 FUser::getUserStatus() const
{
    return m_UserStatus;
}

void FUser::setUserStatus(int32 value)
{
    m_UserStatus = value;
    m_UserStatusIsSet = true;
}

bool FUser::userStatusIsSet() const
{
    return m_UserStatusIsSet;
}

void FUser::unsetUserStatus()
{
    m_UserStatusIsSet = false;
}

}


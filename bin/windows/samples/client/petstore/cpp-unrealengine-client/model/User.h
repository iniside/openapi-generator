/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * User.h
 *
 * A User who is purchasing from the pet store
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_User_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_User_H_


#include "../ModelBase.h"

#include "FString.h"
#include "int64.h"
#include "int32.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// A User who is purchasing from the pet store
/// </summary>
class  User
    : public ModelBase
{
public:
    User();
    virtual ~User();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// User members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<int64> getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const std::shared_ptr<int64>& value);

    /// <summary>
    /// 
    /// </summary>
    FString getUsername() const;
    bool usernameIsSet() const;
    void unsetUsername();

    void setUsername(const FString& value);

    /// <summary>
    /// 
    /// </summary>
    FString getFirstName() const;
    bool firstNameIsSet() const;
    void unsetFirstName();

    void setFirstName(const FString& value);

    /// <summary>
    /// 
    /// </summary>
    FString getLastName() const;
    bool lastNameIsSet() const;
    void unsetLastName();

    void setLastName(const FString& value);

    /// <summary>
    /// 
    /// </summary>
    FString getEmail() const;
    bool emailIsSet() const;
    void unsetEmail();

    void setEmail(const FString& value);

    /// <summary>
    /// 
    /// </summary>
    FString getPassword() const;
    bool passwordIsSet() const;
    void unsetPassword();

    void setPassword(const FString& value);

    /// <summary>
    /// 
    /// </summary>
    FString getPhone() const;
    bool phoneIsSet() const;
    void unsetPhone();

    void setPhone(const FString& value);

    /// <summary>
    /// User Status
    /// </summary>
    std::shared_ptr<int32> getUserStatus() const;
    bool userStatusIsSet() const;
    void unsetUserStatus();

    void setUserStatus(const std::shared_ptr<int32>& value);


protected:
    std::shared_ptr<int64> m_Id;
    bool m_IdIsSet;
    FString m_Username;
    bool m_UsernameIsSet;
    FString m_FirstName;
    bool m_FirstNameIsSet;
    FString m_LastName;
    bool m_LastNameIsSet;
    FString m_Email;
    bool m_EmailIsSet;
    FString m_Password;
    bool m_PasswordIsSet;
    FString m_Phone;
    bool m_PhoneIsSet;
    std::shared_ptr<int32> m_UserStatus;
    bool m_UserStatusIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_User_H_ */

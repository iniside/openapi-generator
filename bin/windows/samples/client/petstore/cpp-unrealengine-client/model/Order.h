/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Order.h
 *
 * An order for a pets from the pet store
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Order_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Order_H_


#include "../ModelBase.h"

#include "FString.h"
#include <cpprest/details/basic_types.h>
#include "int64.h"
#include "int32.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// An order for a pets from the pet store
/// </summary>
class  Order
    : public ModelBase
{
public:
    Order();
    virtual ~Order();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Order members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<int64> getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const std::shared_ptr<int64>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<int64> getPetId() const;
    bool petIdIsSet() const;
    void unsetPetId();

    void setPetId(const std::shared_ptr<int64>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<int32> getQuantity() const;
    bool quantityIsSet() const;
    void unsetQuantity();

    void setQuantity(const std::shared_ptr<int32>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getShipDate() const;
    bool shipDateIsSet() const;
    void unsetShipDate();

    void setShipDate(const utility::datetime& value);

    /// <summary>
    /// Order Status
    /// </summary>
    FString getStatus() const;
    bool statusIsSet() const;
    void unsetStatus();

    void setStatus(const FString& value);

    /// <summary>
    /// 
    /// </summary>
    bool isComplete() const;
    bool completeIsSet() const;
    void unsetComplete();

    void setComplete(bool value);


protected:
    std::shared_ptr<int64> m_Id;
    bool m_IdIsSet;
    std::shared_ptr<int64> m_PetId;
    bool m_PetIdIsSet;
    std::shared_ptr<int32> m_Quantity;
    bool m_QuantityIsSet;
    utility::datetime m_ShipDate;
    bool m_ShipDateIsSet;
    FString m_Status;
    bool m_StatusIsSet;
    bool m_Complete;
    bool m_CompleteIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Order_H_ */

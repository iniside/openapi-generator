{{>licenseInfo}}
{{#operations}}

#include "{{classname}}.h"

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

using namespace {{modelNamespace}};

{{#operation}}
bool F{{classname}}::{{operationId}}(        
        {{#allParams}}
        {{dataType}} {{paramName}}{{#hasMore}},{{/hasMore}}
        {{/allParams}}
        , const FOn{{operationId}}& SuccessDelegate = FOn{{operationId}}()
{
    FString VerbType = "{{httpMethod}}";
    bool bHasFormParams = {{hasFormParams}};
    bool bHasBodyParam = {{hasBodyParam}};
    bool bHasQueryParams = {{hasQueryParams}};
    bool bHasPathParams = {{hasPathParams}};

    TPair<FString, FString> ContentType;
    {{#pathParams}}
    {{datatype}} {{paramName}}
    {{/pathParams}}
    if(VerbType == "GET")
    {
        {{#pathParams}}
        FString("{" + "{{paramName}}" + "}")
        {{/pathParams}}
    }
    {{#bodyParams}}
    
    {{#isListContainer}}
        {{#items}}
            {{#isModel}}
            ContentType.Key = "content-type";
            ContentType.Value = "application/json";
            {{/isModel}}
        {{/items}}
    {{/isListContainer}}
    {{#isModel}}
        ContentType.Key = "content-type";
        ContentType.Value = "application/json";
    {{/isModel}}
    {{/bodyParams}}
    if(bHasQueryParams)
    {
        {{#queryParams}}
        {{#isListContainer}}
        FString Params = "?";
        TArray<TPair<FString, {{datatype}}>> GetParams;
		TPair<FString, {{datatype}}> statusParam;
		statusParam.Key = {{basename}};
		for({{dataType}} p : {{paramName}})
        {
            statusParam.Add(p);
        }
		GetParams.Add(statusParam);
		//Params += "?status=" + Pending;
		for (int32 ParamIdx = 0; ParamIdx < GetParams.Num(); ParamIdx++)
		{
			for (int32 ValueIdx = 0; ValueIdx < GetParams[ParamIdx].Value.Num(); ValueIdx++)
			{
				Params += GetParams[ParamIdx].Key + "=" + GetParams[ParamIdx].Value[ValueIdx];
				if (ValueIdx < GetParams[ParamIdx].Value.Num() - 1)
				{
					Params += "&";
				}
			}
			if (ParamIdx < GetParams.Num() - 1)
			{
				Params += "&";
			}
		}
        {{/isListContainer}}
        {{/queryParams}}
    }
    FString ApiPath = {{path}};
    auto HttpRequest = PlayFabRequestHandler::SendRequest(ApiPath, request.toJSONString(), TEXT("X-SecretKey"), PlayFabSettings::GetDeveloperSecretKey());
    HttpRequest->OnProcessRequestComplete().BindRaw(this, &F{{classname}}::On{{operationId}}, SuccessDelegate, ErrorDelegate);
    return HttpRequest->ProcessRequest();
}
{{/operation}}

{{#operation}}
void F{{classname}}::On{{operationId}}Result(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOn{{operationId}} SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    {{#returnType}}
    {{#isListContainer}}
    {{{returnType}}} OutResult;
    FString ResponseStr = HttpResponse->GetContentAsString();
	DecodeJsonArray<{{{returnType}}}>(OutResult, HttpResponse);
    {{/isListContainer}}
    {{^isListContainer}}
    {{{returnType}}} OutResult;
    TSharedPtr<FJsonObject> JsonObject;
    TSharedRef<TJsonReader<> > JsonReader = TJsonReaderFactory<>::Create(ResponseStr);

    if (FJsonSerializer::Deserialize(JsonReader, JsonObject) && JsonObject.IsValid())
    {
        OutResult.FromJson(JsonObject);
        if (PlayFabRequestHandler::DecodeError(JsonObject, OutError))
        {
            return false;
        }
    }

    {
        SuccessDelegate.ExecuteIfBound(OutResult);
    }
    {{/isListContainer}}
    {{/returnType}} 
    
    
    
}
{{/operation}}

{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

{{/operations}}

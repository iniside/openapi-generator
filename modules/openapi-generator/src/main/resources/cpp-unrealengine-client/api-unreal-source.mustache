{{>licenseInfo}}
{{#operations}}

#include "{{classname}}.h"

{{#apiNamespaceDeclarations}}
namespace {{this}} {
{{/apiNamespaceDeclarations}}

using namespace {{modelNamespace}};

{{#operation}}
bool {{classname}}::{{operationId}}(        
        {{#allParams}}
        {{dataType}} {{paramName}}{{#hasMore}},{{/hasMore}}
        {{/allParams}}
        , const FOn{{operationId}}& SuccessDelegate = FOn{{operationId}}()
{
    FString VerbType = "{{httpMethod}}";
    bool bHasFormParams = {{hasFormParams}};
    bool bHasBodyParam = {{hasBodyParam}};
    bool bHasQueryParams = {{hasQueryParams}};
    bool bHasPathParams = {{hasPathParams}};
    
    FString BasePath = {{path}};
	TPair<FString, FString> AccetpType;
    //defaults
	AccetpType.Key = "accept";
	AccetpType.Value = "application/json";
	TArray<TPair<FString, FString>> Headers;
	Headers.Add(AccetpType);
    
    {{#bodyParams}}
    {{#isListContainer}}
        {{#items}}
            {{#isModel}}
    //if model params, assume it must be json in unreal.
    TPair<FString, FString> ContentType;
    ContentType.Key = "content-type";
    ContentType.Value = "application/json";
    Headers.Add(ContentType);
            {{/isModel}}
        {{/items}}
    {{/isListContainer}}
    {{#isModel}}
    //if model params, assume it must be json in unreal.
    TPair<FString, FString> ContentType;
    ContentType.Key = "content-type";
    ContentType.Value = "application/json";
    Headers.Add(ContentType);
    {{/isModel}}
    {{/bodyParams}}
    {{#queryParams}}
     TArray<TPair<FString,{{dataType}}>> Params;
    {{#isListContainer}}
   
	{
        TPair<FString,{{dataType}}> statusParam;
	    statusParam.Key = "{{baseName}}";
	    for({{baseType}} p : {{paramName}})
        {
            statusParam.Value.Add(p);
        }
        Params.Add(statusParam);
    }
    {{/isListContainer}}
    {{^isListContainer}}
    {
        TPair<FString, TArray<{{dataType}}>> statusParam;
        statusParam.Key = {{baseName}};
        statusParam.Value.Add({{baseName}});
        Params.Add(statusParam);
    }
    {{/isListContainer}}
    FString QueryParams = ConstructQueryParams(Params);
    BasePath += QueryParams;
    {{/queryParams}}
    {{#pathParams}}
    TPair<FString, {{dataType}}> Param;
    Param.Key = FString("{" + "{{paramName}}" + "}");
    Param.Value = {{paramName}}
    ConstructPathParams(Param, BasePath);
    {{/pathParams}}

    
    CreateRequest(EVerbType::{{httpMethod}}, BasePath, Headers, FHttpRequestCompleteDelegate::CreateRaw(this, &{{classname}}::On{{operationId}}));
    
    return HttpRequest->ProcessRequest();
}
{{/operation}}

{{#operation}}
void {{classname}}::On{{operationId}}Result(FHttpRequestPtr HttpRequest
        , FHttpResponsePtr HttpResponse
        , bool bSucceeded, FOn{{operationId}} SuccessDelegate
        , FPlayFabErrorDelegate ErrorDelegate)
{
    FPlayFabCppError errorResult;
    ResponseStr = HttpResponse->GetContentAsString();

    {{#returnType}}
    {{#isListContainer}}
    {{{returnType}}} OutResult;
    FString ResponseStr = HttpResponse->GetContentAsString();
	DecodeJsonArray<{{{returnType}}}>(OutResult, HttpResponse);
    {{/isListContainer}}
    {{^isListContainer}}
    {{{returnType}}} OutResult;
    TSharedPtr<FJsonObject> JsonObject;
    TSharedRef<TJsonReader<> > JsonReader = TJsonReaderFactory<>::Create(ResponseStr);

    if (FJsonSerializer::Deserialize(JsonReader, JsonObject) && JsonObject.IsValid())
    {
        OutResult.FromJson(JsonObject);
        if (PlayFabRequestHandler::DecodeError(JsonObject, OutError))
        {
            return false;
        }
    }

    {
        SuccessDelegate.ExecuteIfBound(OutResult);
    }
    {{/isListContainer}}
    {{/returnType}} 
    
    
    
}
{{/operation}}

{{#apiNamespaceDeclarations}}
}
{{/apiNamespaceDeclarations}}

{{/operations}}
